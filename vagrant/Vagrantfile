# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
require 'ipaddr'

box = "generic/ubuntu1604"
vagrant_config = YAML.load_file("provisioning/vm_config.conf.yml")
minions = 2
node_name_prefix = ENV["USER"]

ovn_external = ENV[ 'OVN_EXTERNAL' ]

hostnames = [ vagrant_config['k8smaster']['overlay-ip'], vagrant_config['k8smaster']['short_name'] ]
(1..minions).each do |nn|
  hostnames.push(vagrant_config["k8sminion#{nn}"]['overlay-ip'])
  hostnames.push(vagrant_config["k8sminion#{nn}"]['short_name'])
end

Vagrant.configure(2) do |config|
  config.vm.box = box
  config.vm.provider "libvirt" do |lv, override|
    # override.vm.box = "ceph/ubuntu-xenial"
    lv.driver = "kvm"
  end

  config.vm.synced_folder File.expand_path("k8s"), "/home/vagrant/k8s"

  # Use the ipaddr library to calculate the netmask of a given network
  net = IPAddr.new vagrant_config['public_network']
  netmask = net.inspect().split("/")[1].split(">")[0]

  # Bring up the Devstack ovsdb/ovn-northd node on Virtualbox
  config.vm.define "#{node_name_prefix}-k8s-master" do |k8smaster|
    k8smaster.vm.host_name = vagrant_config['k8smaster']['host_name']
    k8smaster.vm.network "private_network", ip: vagrant_config['k8smaster']['overlay-ip']
    if !ovn_external.nil?
        k8smaster.vm.network "public_network", bridge: ovn_external
    else
        k8smaster.vm.network "private_network", ip: vagrant_config['k8smaster']['public-ip'], netmask: netmask
    end
    k8smaster.vm.provision "shell", path: "provisioning/setup-hostnames.sh", privileged: true, :args => hostnames.join(' ')
    k8smaster.vm.provision "shell", path: "provisioning/setup-master.sh", privileged: false,
      :args => "#{vagrant_config['k8smaster']['overlay-ip']} #{vagrant_config['k8smaster']['public-ip']} #{vagrant_config['k8smaster']['short_name']} #{vagrant_config['k8smaster']['master-switch-subnet']}"
    k8smaster.vm.provision "shell", path: "provisioning/setup-k8s-master.sh", privileged: false,
      :args => "#{vagrant_config['k8smaster']['public-ip']} #{netmask} #{vagrant_config['public_gateway']} #{ovn_external}"
    k8smaster.vm.provider "libvirt" do |domain|
      domain.uri = "qemu+unix:///system"
      domain.memory = vagrant_config['k8smaster']['memory']
      domain.cpus = vagrant_config['k8smaster']['cpus']
      domain.driver = "kvm"
      domain.host = "localhost"
      domain.connect_via_ssh = false
      domain.nic_model_type = "e1000"
      domain.storage_pool_name = "default"
      domain.nic_model_type = "e1000"
      # domain.management_network_name = "mr_#{node_name_prefix}_vagrant"
      # domain.management_network_address = "#{vagrant_cidr}"
      domain.nested = true
      domain.cpu_mode = "host-passthrough"
      domain.volume_cache = "unsafe"
      domain.disk_bus = "virtio"
    end
  end

  (1..minions).each do |nn|
    config.vm.define "#{node_name_prefix}-k8s-minion-#{nn}" do |k8sminion|
      k8sminion.vm.host_name = vagrant_config["k8sminion#{nn}"]['host_name']
      #k8sminion.vm.host_name = "k8sminion#{nn}"
      k8sminion.vm.network "private_network", ip: vagrant_config["k8sminion#{nn}"]['overlay-ip']
      if !ovn_external.nil?
          k8sminion.vm.network "public_network", bridge: ovn_external
      else
          k8sminion.vm.network "private_network", ip: vagrant_config["k8sminion#{nn}"]['public-ip'], netmask: netmask
      end
      k8sminion.vm.provision "shell", path: "provisioning/setup-hostnames.sh", privileged: true, :args => hostnames.join(' ')
      k8sminion.vm.provision "shell", path: "provisioning/setup-minion.sh", privileged: false,
        :args => "#{vagrant_config['k8smaster']['overlay-ip']} #{vagrant_config["k8sminion#{nn}"]['overlay-ip']} #{vagrant_config["k8sminion#{nn}"]['public-ip']} #{netmask} #{vagrant_config["k8sminion#{nn}"]['short_name']} #{vagrant_config["k8sminion#{nn}"]['minion-switch-subnet']} #{vagrant_config['public_gateway']} #{ovn_external}"
      k8sminion.vm.provision "shell", path: "provisioning/setup-k8s-minion.sh", privileged: false,
        :args => "#{vagrant_config['k8smaster']['overlay-ip']}"
      k8sminion.vm.provider "libvirt" do |domain|
        domain.uri = "qemu+unix:///system"
        domain.memory = vagrant_config["k8sminion#{nn}"]['memory']
        domain.cpus = vagrant_config["k8sminion#{nn}"]['cpus']
        domain.driver = "kvm"
        domain.host = "localhost"
        domain.connect_via_ssh = false
        domain.nic_model_type = "e1000"
        domain.storage_pool_name = "default"
        domain.nic_model_type = "e1000"
        # domain.management_network_name = "mr_#{node_name_prefix}_vagrant"
        # domain.management_network_address = "#{vagrant_cidr}"
        domain.nested = true
        domain.cpu_mode = "host-passthrough"
        domain.volume_cache = "unsafe"
        domain.disk_bus = "virtio"
      end
    end
  end

end
